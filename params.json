{"name":"Helm","tagline":"Emacs incremental completion and selection narrowing framework","body":"<p><a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\"><img src=\"https://img.shields.io/badge/license-GPL_3-green.svg\" alt=\"License GPL 3\" /></a>\r\n<a href=\"http://melpa.org/#/helm\"><img src=\"http://melpa.org/packages/helm-badge.svg\" alt=\"MELPA\" title=\"\" /></a>\r\n<a href=\"http://stable.melpa.org/#/helm\"><img src=\"http://stable.melpa.org/packages/helm-badge.svg\" alt=\"MELPA Stable\" title=\"\" /></a></p>\r\n\r\n<h1>Emacs-helm</h1>\r\n\r\n<p><img src=\"https://avatars3.githubusercontent.com/u/1541688?v=3&amp;s=200\" alt=\"Emacs-helm\" title=\"\" /></p>\r\n\r\n<p>You can  <a href=\"https://gratipay.com/thierryvolpiatto\"><img src=\"https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png\" alt=\"Support via Gratipay\" title=\"\" /></a> or <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=thierry.volpiatto@gmail.com&amp;lc=US&amp;currency_code=EUR&amp;bn=PP-DonationsBF:btn_donateCC_LG.gif:NonHosted\"><img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" alt=\"Donate\" title=\"\" /></a> to help this project.</p>\r\n\r\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc/generate-toc again -->\r\n**Table of Contents**\r\n\r\n- [Introduction](#introduction)\r\n- [Requirements](#requirements)\r\n- [Getting Started](#getting-started)\r\n    - [Quick install from git](#quick-install-from-git)\r\n    - [Install from Emacs packaging system](#install-from-emacs-packaging-system)\r\n    - [Alternate install warning](#alternate-install-warning)\r\n    - [Configuration](#configuration)\r\n    - [Basic usage](#basic-usage)\r\n    - [Advanced usage](#advanced-usage)\r\n        - [Create your own helm source (overview)](#create-your-own-helm-source-overview)\r\n        - [Fuzzy matching](#fuzzy-matching)\r\n        - [Autoresize](#autoresize)\r\n- [Features](#features)\r\n    - [Applications (not exhaustive)](#applications-not-exhaustive)\r\n- [Helm extensions you should install](#helm-extensions-you-should-install)\r\n- [Known issues](#known-issues)\r\n- [Contributors](#contributors)\r\n- [Bugs & Improvements](#bugs--improvements)\r\n- [Getting help](#getting-help)\r\n\r\n<!-- markdown-toc end -->\r\n\r\n# Introduction\r\n\r\n`Helm` is incremental completion and selection narrowing framework for\r\nEmacs. It will help steer you in the right direction when you're looking\r\nfor stuff in Emacs (like buffers, files, etc).\r\n\r\nHelm is a fork of `anything.el` originally written by Tamas Patrovic\r\nand can be considered to be its successor. \r\n`Helm` sets out to clean up the legacy code in `anything.el`\r\nand provide a cleaner, leaner and more modular tool, that's not tied in\r\nthe trap of backward compatibility. \r\n\r\n# Requirements\r\n\r\nYou need a recent Emacs to use latest helm, at least Emacs-24.3.\r\n\r\n[async](https://github.com/jwiegley/emacs-async) will be installed as dependency\r\nwhen installing from melpa but is facultative when installing from git (recommended though\r\nas it may fix installation of all packages from (m)elpa and will allow you to\r\ncopy/rename asynchronously your files from helm and/or dired if needed).\r\n\r\n# Getting Started\r\n\r\n## Quick install from git\r\n\r\n  1. Clone the `helm` repository to some directory:\r\n  \r\n    ```elisp\r\n    $ git clone https://github.com/emacs-helm/helm.git /path/to/helm/directory\r\n    ```\r\n\r\n  2. Clone the `async` repository to some directory (facultative)\r\n\r\n    ```elisp\r\n    $ git clone https://github.com/jwiegley/emacs-async.git /path/to/async/directory\r\n    ```\r\n  3. Run `make` from the `helm` directory.\r\n  \r\n  3. Add to `.emacs.el` (or equivalent):\r\n\r\n    ```elisp\r\n    ;; [Facultative] Only if you have installed async.\r\n    (add-to-list 'load-path \"/path/to/async/directory\")\r\n    \r\n    (add-to-list 'load-path \"/path/to/helm/directory\")\r\n    (require 'helm-config)\r\n    ```\r\n    \r\n_NOTE:_ Installing helm like this (i.e from git+make) is the safest way.\r\n\r\nYou can have a quick try to `helm` by launching from the helm directory:\r\n\r\n`./emacs-helm.sh`\r\n\r\nIt is also recommended to use this when reporting bug.\r\n\r\n_NOTE:_ That this will not work on Windows systems.\r\n\r\n## Install from Emacs packaging system\r\n\r\nHelm is now available on Melpa at http://melpa.org/\r\nYou will find there instructions to install.\r\nSee also https://github.com/milkypostman/melpa#usage to startup correctly\r\nwith the emacs packaging system.\r\nThen you should need only in your init file:\r\n\r\n```elisp\r\n(require 'helm-config)\r\n```\r\n\r\n_WARNING:_ Due to a bad concept of package.el which is in charge of fetching helm files\r\nand compiling them, users had errors most of the time when upgrading from melpa and `list-package`.\r\nTo avoid this [Async](https://github.com/jwiegley/emacs-async) have been added as dependency to\r\nhelm to force package.el compiling its files in a clean environment.\r\nPeople installing from git and using the make file will not suffer from this problem and don't need\r\n[Async](https://github.com/jwiegley/emacs-async) though it is recommended as it fix installation\r\nof all other packages you may install with package.el from (m)elpa.\r\nSee [FAQ](https://github.com/emacs-helm/helm/wiki#faq) for more infos.\r\n\r\n_Note:_ After upgrading from the emacs packaging system you should restart emacs for the changes take effect.\r\n\r\n**Note to Linux Distributions Maintainers**\r\n\r\n`Only the extensions present in the github emacs-helm organisation are supported.`\r\n\r\n## Alternate install warning\r\n\r\nSome people are installing `helm` with their own config using diverses `require`, `autoload`\r\nand other hacks, not using `helm-config`.\r\nExpect failures and slowdown at startup unless you really know what you are doing when you do so.\r\n\r\n## Configuration\r\n\r\nFor a minimal helm configuration, run the startup script `./emacs-helm.sh`\r\nand look at the file `/tmp/helm-cfg.el`.\r\n\r\nThe full configuration I use (helm maintainer) can be found [here](https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/init-helm-thierry.el).\r\n\r\nDon't hesitate also to visit all helm customizable variables with the customize interface.\r\nEnabling `helm-mode` will give you completion in the diverse customize commands.\r\n\r\nAlso you will find some packages like [Emacs Prelude](https://github.com/bbatsov/prelude) that\r\nhave Helm built-in and properly set-up.\r\n\r\n## Basic usage\r\n\r\nJust type `M-x helm-M-x RET helm-`, you will have completion on all helm commands.\r\n\r\nYou can bind this to `M-x` like this:\r\n\r\n`(global-set-key (kbd \"M-x\") 'helm-M-x)`\r\n\r\n- _IMPORTANT:_\r\n\r\nOnce you are in the helm session (of `helm-M-x` or any one else) you can hit either `C-h m` or\r\n`C-c ?`, the former is will popup a general info buffer about helm while the second will\r\npopup a specialized info of the current source you are into.\r\nSometime `C-c ?` is not available, in this case you will see in mode-line `C-h m` instead of `C-c ?`.\r\nPLEASE USE and ABUSE of these `helm` embeded infos before reporting a bug about how to do things\r\nin `helm`, you will find also useful infos in mode-line.\r\n\r\nYou can also start with `M-x helm-mode` and enjoy helm completion in your favourites\r\nEmacs commands (e.g `M-x`, `C-x C-f`, etc...).\r\nYou can enable this by adding in your init file:\r\n\r\n```elisp\r\n(helm-mode 1)\r\n```\r\n\r\n- _NOTE_ that the helmized emacs commands are different and much more basics than the helm ones.\r\n\r\nAs a startup point you can also look at the helm section in Emacs menu to\r\ndiscover some of the commands provided by helm.\r\n\r\nFor those who have a system able to run shell scripts, a convenient way to discover helm\r\nis to run `./emacs-helm.sh` from the helm directory, you will find interesting infos in\r\nyour scratch buffer.\r\n`emacs-helm.sh` accept all emacs command line options, see `emacs-helm.sh -h` for more\r\ninfos.\r\n\r\n## Advanced usage\r\n\r\nHelm is capable of a lot. Here is a demo of `helm-buffers-list` used with `helm-moccur`:\r\n\r\n![helm-buffers-list](images/helm-buffers-list.gif)\r\n\r\nThe demo starts when you see `Eval: START` in the minibuffer.\r\n\r\n- All the C buffers are selected using the regexp `*C`. In the demo, I also select Tcl buffers with `*Tcl` and then switched back to C buffers with `*C`.\r\n- I only want to have buffers that contains only the string \"crash\". To do that, I add a space, then add the pattern `@crash`.\r\n- After the initial search pattern, I hand over the current matching buffers to `helm-moccur` - `moccur` with Helm interface. In the above demo, I only switch to one file, that is `kexec.c`. However, you can select multiple buffers with `C-SPC` or select all buffers with `M-a`.\r\n- Candidates can be filtered gradually by adding more pattern, i.e. I added `memory` to filtered down to buffers that contain the string \"memory\" among the buffers that are containing \"crash\".\r\n\r\nAs you can see, as you filtered out, the number of candidates decreases, as displayed in the modeline. At the end, there were 12 buffers remained as the result of filtering, down from the total 253 buffers.\r\n\r\nYou can read [this guide](http://tuhdo.github.io/helm-intro.html) to quickly get started with Helm.\r\n\r\nYou can find all the gory details on the [Helm Wiki](https://github.com/emacs-helm/helm/wiki).\r\n\r\n### Create your own helm source (overview)\r\n\r\nHere a quick example using sync method with candidates generated by a simple list, a function can be used instead of course ([see helm wiki for more infos](https://github.com/emacs-helm/helm/wiki#25-developping-using-helm-framework)).\r\n\r\n\r\n```elisp\r\n\r\n(helm :sources (helm-build-sync-source \"test\"\r\n                 :candidates '(foo foa fob bar baz)\r\n                 :fuzzy-match t)\r\n      :buffer \"*helm test*\")\r\n\r\n```\r\n\r\n### Fuzzy matching\r\n\r\nHelm has a built-in fuzzy matcher that is activated for some commands. Fuzzy matching is disabled by default. Currently these commands supports fuzzy matching:\r\n\r\n- `helm-recentf`: Enable by setting `helm-recentf-fuzzy-match` to `t`.\r\n- `helm-mini`: Enable by setting `helm-buffers-fuzzy-matching` and `helm-recentf-fuzzy-match` to `t`.\r\n- `helm-buffers-list`: Enable by setting `helm-buffers-fuzzy-matching` to `t`.\r\n- `helm-find-files`: Enable by default.\r\n- `helm-locate`: Enable by setting `helm-locate-fuzzy-match` to `t`.\r\n- `helm-M-x`: Enable by setting `helm-M-x-fuzzy-match` to `t`.\r\n- `helm-semantic`: Enable by setting `helm-semantic-fuzzy-match` to `t`.\r\n- `helm-imenu`: Enable by setting `helm-imenu-fuzzy-match` to `t`.\r\n- `helm-apropos`: Enable by setting `helm-apropos-fuzzy-match` to `t`.\r\n- `helm-lisp-completion-at-point`: Enable by setting `helm-lisp-fuzzy-completion` to `t`.\r\n\r\nYou can also enable fuzzy matching globally in all functions helmized by `helm-mode` with `helm-mode-fuzzy-match`\r\nand `helm-completion-in-region-fuzzy-match`.\r\n\r\n**IMPORTANT**: To make fuzzy-matching fast, you must not set `helm-candidate-number-limit` too high. It is recommended that you leave the variable with its default value 100. The higher you set `helm-candidate-number-limit`, the slower fuzzy-matching will be.\r\n\r\n### Autoresize\r\n\r\nHelm can now resize according to the number of candidates with `helm-autoresize-mode`:\r\n\r\n    (helm-autoresize-mode 1)\r\n\r\nYou can customize the minimum and maximum height that Helm can resize with these two variables:\r\n\r\n- `helm-autoresize-max-height`\r\n- `helm-autoresize-min-height`\r\n\r\nBy default, `helm-autoresize-max-height` is set to 40, which makes Helm candidate buffer has the maximum height of 40% of current frame height. Similarly, `helm-autoresize-min-height` specifies the minimum height that Helm candidate buffer cannot be smaller.\r\n\r\nIf you don't want the Helm window to be resized, but a smaller Helm window, you can set `helm-autoresize-max-height` equal to `helm-autoresize-max-height`.\r\n\r\n# Features\r\n\r\n## Applications (not exhaustive)\r\n\r\n- `helm-mode`: Allow turning on helm in all completions provided by emacs, when available you should use instead the same feature provided natively by helm.\r\n- `helm-find-files`: Replace in one command all the files related commands (Bind it to `C-x C-f`!).\r\n- `helm-buffers-list`: Enhanced buffers listing.\r\n- `helm-browse-project`: Show all buffers and files related to project or current directory (Usable everywhere with `helm-find-files`) you will want to install\r\n[helm-ls-git](https://github.com/emacs-helm/helm-ls-git) and [helm-ls-hg](https://github.com/emacs-helm/helm-ls-hg) for a better experience.\r\n- `helm-dabbrev`: Enhanced dabbrev with helm completion (Own implementation of dabbrev for helm, don't reuse emacs code).\r\n- `helm-moccur`: Enhanced occur for one or more buffers, launch it from `helm-buffers-list` or `current-buffer`(Own implementation).\r\n- `helm-M-x`: Enhanced version of `execute-extended-command` (Bind it to `M-x`!).\r\n- `helm-imenu` and `helm-imenu-in-all-buffers`: Imenu in `current-buffer` or in all your buffers.\r\n- `helm-etags-select`: Enhanced version of etags with helm-completion (Usable everywhere with `helm-find-files`).\r\n- `helm-apropos`: Description of functions, variables, etc... Use it instead of Most `C-h` commands.\r\n- `Grep`: You can launch it (recursively or not) from any files related helm commands, support as backends `grep`, `ack-grep`, `git-grep` (Own implementation).\r\n- `helm-gid`: Helm interface to `gid` from [id-utils](https://www.gnu.org/software/idutils/).\r\n- `helm-show-kill-ring`: A kill ring browser for helm.\r\n- `helm-all-mark-rings`: A mark ring for helm, allow retrieving your last position(s) in a buffer.\r\n- `helm-filtered-bookmarks`: An enhanced bookmark listing.\r\n- `helm-list-elisp-packages`: Manage emacs packages with helm.\r\n\r\n# Helm extensions you should install\r\n\r\n- [helm-ls-git](https://github.com/emacs-helm/helm-ls-git)\r\n- [helm-ls-hg](https://github.com/emacs-helm/helm-ls-hg)\r\n- [helm-descbinds](https://github.com/emacs-helm/helm-descbinds)\r\n- [helm-firefox](https://github.com/emacs-helm/helm-firefox)\r\n\r\n**Warning** You will find many extensions outside of [emacs-helm](https://github.com/emacs-helm)\r\nthat provide nothing more than what is provided natively by [helm](https://github.com/emacs-helm/helm) and may not be in sync will `helm` core.\r\nSo generally prefer what is provided natively in `helm` instead of its counterpart provided externally.\r\n\r\n# Known issues\r\n\r\nCheck out the project's\r\n[issue list](https://github.com/emacs-helm/helm/issues?sort=created&direction=desc&state=open)\r\na list of unresolved issues. By the way - feel free to fix any of them\r\nand send us a pull request. :-)\r\n\r\n# Contributors\r\n\r\nHere's a [list](https://github.com/emacs-helm/helm/contributors) of all the people who have contributed to the\r\ndevelopment of Helm.\r\n\r\n# Bugs & Improvements\r\n\r\nBug reports and suggestions for improvements are always\r\nwelcome, be sure though they are related to helm, many bugs are coming from emacs itself\r\nor other packages. GitHub pull requests are even better! :-)\r\n\r\nNOTE: When trying if something is working or not, be sure to start helm from `Emacs -Q` or even better\r\nStart it from your helm directory with `./emacs-helm.sh`.\r\n\r\n# Getting help\r\n\r\nIf [Helm Wiki](https://github.com/emacs-helm/helm/wiki) is not enough, you can ask for help\r\non [emacs-helm google group](https://groups.google.com/group/emacs-helm?hl=en).\r\n\r\n\r\nCheers,<br>\r\nThe Helm Team\r\n\r\n[badge-license]: https://img.shields.io/badge/license-GPL_3-green.svg\r\n","google":"UA-54420623-1","note":"Don't delete this file! It's used internally to help with page regeneration."}